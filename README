## Video Demo

A MVVM demo of simple ExoPlayer playback. The list of assets is provided by a mocked networking call.

### Checklist

- [ ] Big Buck Bunny has a visible resize when system ui appears/disappears in landscape
- [ ] Make UML doc for the module structure
- [ ] Add Mockk tests for all classes that are testable
- [ ] Add episode selection to controls
- [ ] Enable Auto-Play and/or playlist ability
- [ ] Cleanup modules as noted in the comments
- [ ] Make a generic RecyclerView pattern
- [ ] Add Feature toggles and a debug drawer

### Structure

Demo is broken into several modules which define clear lines of responsibility.
These have their own 3rd party dependencies but each should expose its own "public" API. In this way, each one could have its underlying dependencies changed without requiring refactors outside of the module.

#### App

The actual application. It should have minimal logic but something has to be coupled to the Android framework to render views.

#### BuildSrc

This is some gradle glue to facilitate easier versioning across modules. Shamelessly taken from https://proandroiddev.com/gradle-dependency-management-with-kotlin-94eed4df9a28

#### Common Utils

This is where common helper classes and common kotlin extensions should be placed. It shouldn't depend on any other modules and can be depended on by any other module.

#### JSON

Only mocked for now
A low level module for turning JSON responses into POJO data classes. Networking and DB modules can depend on it. Highly generic so it can be used without having to depend on a higher-up module where the POJO is defined.

#### Logging

This is a wrapper around Timber. It shouldn't depend on any other modules and can be depended on by any other module.
Includes an implemented Mockk test.

#### Models

This is the collection of POJO models that correlate to the API models.
It also has the view state models but I think those should be broken out into their own module

#### Networking

A low level module for performing networking operations to return POJO's via OkHttp, JSON module, and coroutines. Highly generic like JSON.
Should be testable.

#### Player

A module that can be used for playback of videos with unecrypted HLS or DASH. It exposes the portion of the ExoPlayer API necessary for controls. It depends on the networking library for OkHttp for its data source.
Should be testable.

#### ViewModels

This is the controller that separates logic from the actual Android classes. Its responsible to leverage the other modules to actually deliver the info necessary to show a functioning UI, while being testable.

#### Dependency Injection

A DI framework specifically for Kotlin that can tie middle-high level modules together. Closely tied to Koin which is not ideal but works for now. Any modules providing injectable components should implement IModuleProvider.

#### Not Added

Other modules that aren't added but would make logical sense to add as clearly defined, separate responsibility modules include:
* Database
* Definitions
* RX
* Events
* Analytics
* Auth
* User
* Config
* Toggles - https://martinfowler.com/articles/feature-toggles.html
